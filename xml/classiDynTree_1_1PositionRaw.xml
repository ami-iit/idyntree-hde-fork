<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classiDynTree_1_1PositionRaw" kind="class" language="C++" prot="public">
    <compoundname>iDynTree::PositionRaw</compoundname>
    <basecompoundref refid="classiDynTree_1_1VectorFixSize" prot="public" virt="non-virtual">iDynTree::VectorFixSize&lt; 3 &gt;</basecompoundref>
    <derivedcompoundref refid="classiDynTree_1_1Position" prot="public" virt="non-virtual">iDynTree::Position</derivedcompoundref>
    <includes local="no">iDynTree/Core/PositionRaw.h</includes>
      <sectiondef kind="user-defined">
      <header>Output helpers.</header>
      <description><para>Output helpers. </para>
</description>
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1a673f8b97cb2251f58b9cd8269abe1c35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::PositionRaw::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="75" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1ad9bc7d10dfcc39db22d173c18e2d28a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::PositionRaw::reservedToString</definition>
        <argsstring>() const</argsstring>
        <name>reservedToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="77" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1a262288c2b48b229af89bebb53d92d9f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::PositionRaw::PositionRaw</definition>
        <argsstring>()</argsstring>
        <name>PositionRaw</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The data is not reset to 0 for perfomance reason. Please initialize the data in the vector before any use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="37" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1a7e7bc8ca7dd0f280f948bd5b68a74be9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::PositionRaw::PositionRaw</definition>
        <argsstring>(double x, double y, double z)</argsstring>
        <name>PositionRaw</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Constructor from 3 doubles: initialize the coordinates with the passed values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="42" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1a80d840331aaff631f3a20de6c1ad058c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::PositionRaw::PositionRaw</definition>
        <argsstring>(const double *in_data, const unsigned int in_size)</argsstring>
        <name>PositionRaw</name>
        <param>
          <type>const double *</type>
          <declname>in_data</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>in_size</declname>
        </param>
        <briefdescription>
<para>Constructor from a raw buffer of 3 doubles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="47" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1a393b55cd191f8e7d55e1b0f01d34c593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::PositionRaw::PositionRaw</definition>
        <argsstring>(const PositionRaw &amp;other)</argsstring>
        <name>PositionRaw</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor: create a <ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref> from another <ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="52" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1ade679b0251443c8dceb3057b296cd548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::PositionRaw::PositionRaw</definition>
        <argsstring>(iDynTree::Span&lt; const double &gt; other)</argsstring>
        <name>PositionRaw</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct from a span. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>if the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> size is different from 3 an assert is thrown at run-time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="58" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1a890b62a7da3fffa39225b8bffe42b082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref> &amp;</type>
        <definition>const PositionRaw&amp; iDynTree::PositionRaw::changePoint</definition>
        <argsstring>(const PositionRaw &amp;newPoint)</argsstring>
        <name>changePoint</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref> &amp;</type>
          <declname>newPoint</declname>
        </param>
        <briefdescription>
<para>Geometric operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="63" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1ac9ae12237eab2576cbd7d72d69a248e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref> &amp;</type>
        <definition>const PositionRaw&amp; iDynTree::PositionRaw::changeRefPoint</definition>
        <argsstring>(const PositionRaw &amp;newRefPoint)</argsstring>
        <name>changeRefPoint</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref> &amp;</type>
          <declname>newRefPoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="64" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1aeb3d01e442c7e59b1c090119f4ee629c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1SpatialMotionVector" kindref="compound">SpatialMotionVector</ref></type>
        <definition>SpatialMotionVector iDynTree::PositionRaw::changePointOf</definition>
        <argsstring>(const SpatialMotionVector &amp;other) const</argsstring>
        <name>changePointOf</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1SpatialMotionVector" kindref="compound">SpatialMotionVector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="67" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1a33ed3752652d9616246560299cd283c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1SpatialForceVector" kindref="compound">SpatialForceVector</ref></type>
        <definition>SpatialForceVector iDynTree::PositionRaw::changePointOf</definition>
        <argsstring>(const SpatialForceVector &amp;other) const</argsstring>
        <name>changePointOf</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1SpatialForceVector" kindref="compound">SpatialForceVector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="68" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1a95bbcdb325604964ac5f7badad015792" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref></type>
        <definition>static PositionRaw iDynTree::PositionRaw::compose</definition>
        <argsstring>(const PositionRaw &amp;op1, const PositionRaw &amp;op2)</argsstring>
        <name>compose</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref> &amp;</type>
          <declname>op1</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref> &amp;</type>
          <declname>op2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="65" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1PositionRaw_1ad03fd4c796ef99a463767b4f36fe4661" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref></type>
        <definition>static PositionRaw iDynTree::PositionRaw::inverse</definition>
        <argsstring>(const PositionRaw &amp;op)</argsstring>
        <name>inverse</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/PositionRaw.h" line="66" column="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class providing the raw coordinates for <ref refid="classiDynTree_1_1Position" kindref="compound">iDynTree::Position</ref> class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>iDynTree::VectorFixSize&lt; VecSize &gt;</label>
        <link refid="classiDynTree_1_1VectorFixSize"/>
      </node>
      <node id="1">
        <label>iDynTree::PositionRaw</label>
        <link refid="classiDynTree_1_1PositionRaw"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>iDynTree::Position</label>
        <link refid="classiDynTree_1_1Position"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Vector3</label>
        <link refid="classiDynTree_1_1VectorFixSize"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; 3 &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>iDynTree::VectorFixSize&lt; VecSize &gt;</label>
        <link refid="classiDynTree_1_1VectorFixSize"/>
      </node>
      <node id="1">
        <label>iDynTree::PositionRaw</label>
        <link refid="classiDynTree_1_1PositionRaw"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Vector3</label>
        <link refid="classiDynTree_1_1VectorFixSize"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; 3 &gt;</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="iDynTree/Core/PositionRaw.h" line="29" column="5" bodyfile="iDynTree/Core/PositionRaw.h" bodystart="30" bodyend="80"/>
    <listofallmembers>
      <member refid="classiDynTree_1_1VectorFixSize_1ad0f06a255dc213a5904d232f703a0192" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>allocator_type</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1affa1eab2d54d8227d8aeb402dc2dc1f7" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>begin</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a8e64a7875375a8b1b894614ba882ad05" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>begin</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a1420c32072d5c1e21140da111955a6d1" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>cbegin</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a0b5d60b77fbd7ba982e855453800f776" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>cend</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1a890b62a7da3fffa39225b8bffe42b082" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>changePoint</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1aeb3d01e442c7e59b1c090119f4ee629c" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>changePointOf</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1a33ed3752652d9616246560299cd283c8" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>changePointOf</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1ac9ae12237eab2576cbd7d72d69a248e5" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>changeRefPoint</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1a95bbcdb325604964ac5f7badad015792" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>compose</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a69b51f8119155d31a254676ae867ae8f" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>const_pointer</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a3bd1389dbdf51e06f4c64451c242397e" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>data</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1ab6f044aea32e55a72f6ebed68f93f767" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>data</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a9409f3724df4aa4de2c8281ba7e67db2" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>end</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a8b6f1796eba4d7c3db40e3d14e33b246" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>end</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1aee106d61ebb0925fecfa55cbaa515981" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>fillBuffer</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1af8b3a33ff82732e94480023aa18cfe98" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>getVal</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1ad03fd4c796ef99a463767b4f36fe4661" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>inverse</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a7bf5cd26b6fc24c9ddaf8854ebb8ec63" prot="protected" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>m_data</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1afbdebfe9410180223c2d33f6f5a243a5" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>operator()</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1aaeeab0c1251340903c447dbc3cd33b01" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>operator()</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a823899b673570f935b649cb98c1ca4f8" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>operator=</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a8345a3e5ee2998a02dd79019ce293421" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>operator[]</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a21683853dd0b95beea5b091a584fe486" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>operator[]</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1aa11c3eee00e88dabb7880f6cac2a9b82" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>pointer</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1a262288c2b48b229af89bebb53d92d9f9" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>PositionRaw</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1a7e7bc8ca7dd0f280f948bd5b68a74be9" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>PositionRaw</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1a80d840331aaff631f3a20de6c1ad058c" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>PositionRaw</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1a393b55cd191f8e7d55e1b0f01d34c593" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>PositionRaw</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1ade679b0251443c8dceb3057b296cd548" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>PositionRaw</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1ad9bc7d10dfcc39db22d173c18e2d28a2" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>reservedToString</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1ab63541744f87c564754359e4923da4a6" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>setVal</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a92e903cfdf924fee24e71eee1b0dff76" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>size</name></member>
      <member refid="classiDynTree_1_1PositionRaw_1a673f8b97cb2251f58b9cd8269abe1c35" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>toString</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1ada7487eff1fee83db8d41165d30f1263" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>value_type</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a1ed77487376ad9915912e2118cb228af" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>VectorFixSize</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a6e92dc360040bccf652bebb0b0318cd6" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>VectorFixSize</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a9fd2c86208c88b1b904564d0a6f5a3b5" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>VectorFixSize</name></member>
      <member refid="classiDynTree_1_1VectorFixSize_1a57b77a6c96f3276ed8e12b5e35b7f442" prot="public" virt="non-virtual"><scope>iDynTree::PositionRaw</scope><name>zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
