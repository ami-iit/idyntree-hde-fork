<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classiDynTree_1_1RotationRaw" kind="class" language="C++" prot="public">
    <compoundname>iDynTree::RotationRaw</compoundname>
    <basecompoundref refid="classiDynTree_1_1MatrixFixSize" prot="public" virt="non-virtual">iDynTree::MatrixFixSize&lt; 3, 3 &gt;</basecompoundref>
    <derivedcompoundref refid="classiDynTree_1_1Rotation" prot="public" virt="non-virtual">iDynTree::Rotation</derivedcompoundref>
    <includes local="no">iDynTree/Core/RotationRaw.h</includes>
      <sectiondef kind="user-defined">
      <header>Output helpers.</header>
      <description><para>Output helpers. </para>
</description>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a664fe5dfd3048f06edd3e832432ab6bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::RotationRaw::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="140" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a0c0d54a248073cdb774f4ef9fe8f1611" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::RotationRaw::reservedToString</definition>
        <argsstring>() const</argsstring>
        <name>reservedToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="142" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Initialization helpers.</header>
      <description><para>overloaded operators </para>
</description>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a1157c8d34789de9bc2871a78b1e111e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref></type>
        <definition>static RotationRaw iDynTree::RotationRaw::RotX</definition>
        <argsstring>(const double angle)</argsstring>
        <name>RotX</name>
        <param>
          <type>const double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="classiDynTree_1_1Rotation" kindref="compound">Rotation</ref> around axis X of given angle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle (in Radians) of the rotation arount the X axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="103" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a0e74a7a4c05cd27c3253b867d02ee492" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref></type>
        <definition>static RotationRaw iDynTree::RotationRaw::RotY</definition>
        <argsstring>(const double angle)</argsstring>
        <name>RotY</name>
        <param>
          <type>const double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="classiDynTree_1_1Rotation" kindref="compound">Rotation</ref> around axis Y of given angle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle (in Radians) of the rotation arount the Y axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="110" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a8a1c042f7058c6fe75f95d4d06f5ac41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref></type>
        <definition>static RotationRaw iDynTree::RotationRaw::RotZ</definition>
        <argsstring>(const double angle)</argsstring>
        <name>RotZ</name>
        <param>
          <type>const double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="classiDynTree_1_1Rotation" kindref="compound">Rotation</ref> around axis Z of given angle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle (in Radians) of the rotation arount the Z axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="117" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a3dcee2ca1a6e9b6416ea3cf6b815cdad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref></type>
        <definition>static RotationRaw iDynTree::RotationRaw::RPY</definition>
        <argsstring>(const double roll, const double pitch, const double yaw)</argsstring>
        <name>RPY</name>
        <param>
          <type>const double</type>
          <declname>roll</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>yaw</declname>
        </param>
        <briefdescription>
<para>Return a rotation object given Roll, Pitch and Yaw values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method is compatible with the KDL::Rotation::RPY method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="124" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a9d043a540104e689499aa688c48da707" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref></type>
        <definition>static RotationRaw iDynTree::RotationRaw::Identity</definition>
        <argsstring>()</argsstring>
        <name>Identity</name>
        <briefdescription>
<para>Return an identity rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="131" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1aaa44b90d4fa704b11750cfc426fc24e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::RotationRaw::RotationRaw</definition>
        <argsstring>()</argsstring>
        <name>RotationRaw</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The data is not reset to identity for perfomance reason. Please initialize the data in the vector before any use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="50" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1aa0a5bea09ea4fb93c09d5acb1e2b076d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::RotationRaw::RotationRaw</definition>
        <argsstring>(double xx, double xy, double xz, double yx, double yy, double yz, double zx, double zy, double zz)</argsstring>
        <name>RotationRaw</name>
        <param>
          <type>double</type>
          <declname>xx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xz</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yz</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zz</declname>
        </param>
        <briefdescription>
<para>Constructor from 9 doubles: initialize elements of the rotation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="55" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1ab9a6ec23b658bd49cde69622d657e22e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::RotationRaw::RotationRaw</definition>
        <argsstring>(const double *in_data, const unsigned int in_rows, const unsigned int in_cols)</argsstring>
        <name>RotationRaw</name>
        <param>
          <type>const double *</type>
          <declname>in_data</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>in_rows</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>in_cols</declname>
        </param>
        <briefdescription>
<para>Constructor from a buffer of 9 doubles, stored as a C-style array (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>row major). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="64" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a12186033198d4e4b7c3eb48461db1d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::RotationRaw::RotationRaw</definition>
        <argsstring>(iDynTree::MatrixView&lt; const double &gt; other)</argsstring>
        <name>RotationRaw</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; const double &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="68" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a308cb7eb1a78ee179c750b79ae84ccda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::RotationRaw::RotationRaw</definition>
        <argsstring>(const RotationRaw &amp;other)</argsstring>
        <name>RotationRaw</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor: create a <ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref> from another <ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="73" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a37d0a697aaf9d576d7f49493a58d52cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref> &amp;</type>
        <definition>const RotationRaw&amp; iDynTree::RotationRaw::changeOrientFrame</definition>
        <argsstring>(const RotationRaw &amp;newOrientFrame)</argsstring>
        <name>changeOrientFrame</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref> &amp;</type>
          <declname>newOrientFrame</declname>
        </param>
        <briefdescription>
<para>Geometric operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="78" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1ad8862f07c7d01f45194bb9e38b0e60fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref> &amp;</type>
        <definition>const RotationRaw&amp; iDynTree::RotationRaw::changeRefOrientFrame</definition>
        <argsstring>(const RotationRaw &amp;newRefOrientFrame)</argsstring>
        <name>changeRefOrientFrame</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref> &amp;</type>
          <declname>newRefOrientFrame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="79" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a454c11a15ccb1f1f5cf74148e2a2c94f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref></type>
        <definition>PositionRaw iDynTree::RotationRaw::changeCoordFrameOf</definition>
        <argsstring>(const PositionRaw &amp;other) const</argsstring>
        <name>changeCoordFrameOf</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1PositionRaw" kindref="compound">PositionRaw</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="82" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a066ec0cd376d0b362944d92ad7f7422a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1ClassicalAcc" kindref="compound">ClassicalAcc</ref></type>
        <definition>ClassicalAcc iDynTree::RotationRaw::changeCoordFrameOf</definition>
        <argsstring>(const ClassicalAcc &amp;other) const</argsstring>
        <name>changeCoordFrameOf</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1ClassicalAcc" kindref="compound">ClassicalAcc</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="83" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1aae1b906465c8dff05dbe2c60637a3071" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1RotationalInertiaRaw" kindref="compound">RotationalInertiaRaw</ref></type>
        <definition>RotationalInertiaRaw iDynTree::RotationRaw::changeCoordFrameOf</definition>
        <argsstring>(const RotationalInertiaRaw &amp;other) const</argsstring>
        <name>changeCoordFrameOf</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1RotationalInertiaRaw" kindref="compound">RotationalInertiaRaw</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="84" column="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a5fbe3e13fcf00607c4cd99f474856ab2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref></type>
        <definition>static RotationRaw iDynTree::RotationRaw::compose</definition>
        <argsstring>(const RotationRaw &amp;op1, const RotationRaw &amp;op2)</argsstring>
        <name>compose</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref> &amp;</type>
          <declname>op1</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref> &amp;</type>
          <declname>op2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="80" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1RotationRaw_1a455607358f260425dd91b61d97018678" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref></type>
        <definition>static RotationRaw iDynTree::RotationRaw::inverse2</definition>
        <argsstring>(const RotationRaw &amp;orient)</argsstring>
        <name>inverse2</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1RotationRaw" kindref="compound">RotationRaw</ref> &amp;</type>
          <declname>orient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Core/RotationRaw.h" line="81" column="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class providing the raw coordinates for <ref refid="classiDynTree_1_1Rotation" kindref="compound">iDynTree::Rotation</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>Storage for the Orientation: The rotation matrix representation of the orientation, stored in row major order, inside a Matrix3x3 parent object.</para>
<para><simplesect kind="note"><para>This implementation is compatible with KDL::Rotation data.</para>
</simplesect>
<simplesect kind="warning"><para>This class uses for convenience the Matrix3x3 as a public parent. Notice that using this methods you can damage the underlyng rotation matrix. In doubt, don&apos;t use them and rely on more high level functions. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>iDynTree::Rotation</label>
        <link refid="classiDynTree_1_1Rotation"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Matrix3x3</label>
        <link refid="classiDynTree_1_1MatrixFixSize"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; 3, 3 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>iDynTree::RotationRaw</label>
        <link refid="classiDynTree_1_1RotationRaw"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>iDynTree::MatrixFixSize&lt; nRows, nCols &gt;</label>
        <link refid="classiDynTree_1_1MatrixFixSize"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Matrix3x3</label>
        <link refid="classiDynTree_1_1MatrixFixSize"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; 3, 3 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>iDynTree::RotationRaw</label>
        <link refid="classiDynTree_1_1RotationRaw"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>iDynTree::MatrixFixSize&lt; nRows, nCols &gt;</label>
        <link refid="classiDynTree_1_1MatrixFixSize"/>
      </node>
    </collaborationgraph>
    <location file="iDynTree/Core/RotationRaw.h" line="42" column="5" bodyfile="iDynTree/Core/RotationRaw.h" bodystart="43" bodyend="144"/>
    <listofallmembers>
      <member refid="classiDynTree_1_1RotationRaw_1a454c11a15ccb1f1f5cf74148e2a2c94f" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>changeCoordFrameOf</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a066ec0cd376d0b362944d92ad7f7422a" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>changeCoordFrameOf</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1aae1b906465c8dff05dbe2c60637a3071" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>changeCoordFrameOf</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a37d0a697aaf9d576d7f49493a58d52cf" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>changeOrientFrame</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1ad8862f07c7d01f45194bb9e38b0e60fa" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>changeRefOrientFrame</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1ae38fd55ba7321a950d4d99a215508bf2" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>cols</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a5fbe3e13fcf00607c4cd99f474856ab2" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>compose</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1afa9fff22a34eb198785d87ffe161488f" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>data</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1aa4afb9030800a8424afd9a8bb36d8972" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>data</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a58750c21e5e8c31c54c3eed7dd2309b6" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>fillColMajorBuffer</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a6da0a936d351418e0dcb4d67f3d0abbc" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>fillRowMajorBuffer</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1af7565606ec61a76aef023327d6d76e5d" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>getVal</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a9d043a540104e689499aa688c48da707" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>Identity</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a455607358f260425dd91b61d97018678" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>inverse2</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a8e916f4550fec92847dab198695299a1" prot="protected" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>m_data</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a5a0f188608c558f9865c068ff219fbf7" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>MatrixFixSize</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1af40e02e39fdc16ea5c8b48017118cf9e" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>MatrixFixSize</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a36e8e1c4e1b9910a1a0837e270cb8a62" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>MatrixFixSize</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1ab3e1a6639194edc7f1449f7a035006e7" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>operator()</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a0d188ae16044771a2baeb0e9e4749647" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>operator()</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a94ef6fa6794ee354df4687078731e383" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>operator=</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a0c0d54a248073cdb774f4ef9fe8f1611" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>reservedToString</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1aaa44b90d4fa704b11750cfc426fc24e6" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>RotationRaw</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1aa0a5bea09ea4fb93c09d5acb1e2b076d" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>RotationRaw</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1ab9a6ec23b658bd49cde69622d657e22e" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>RotationRaw</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a12186033198d4e4b7c3eb48461db1d4f" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>RotationRaw</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a308cb7eb1a78ee179c750b79ae84ccda" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>RotationRaw</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a1157c8d34789de9bc2871a78b1e111e2" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>RotX</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a0e74a7a4c05cd27c3253b867d02ee492" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>RotY</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a8a1c042f7058c6fe75f95d4d06f5ac41" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>RotZ</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a1504fe384616906ee0bab7a7751426c8" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>rows</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a3dcee2ca1a6e9b6416ea3cf6b815cdad" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>RPY</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1ad0f0ee21b75babc619fffec43e922747" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>setVal</name></member>
      <member refid="classiDynTree_1_1RotationRaw_1a664fe5dfd3048f06edd3e832432ab6bc" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>toString</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a8f8fd8b2d42c3b1e51eaac923dc77395" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>value_type</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a26bd376a8f4cfa044ff366a22f1aab6e" prot="public" virt="non-virtual"><scope>iDynTree::RotationRaw</scope><name>zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
